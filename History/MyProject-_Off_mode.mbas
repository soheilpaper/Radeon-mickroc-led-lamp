program MyProject
' Declarations section
 dim hours, minutes, seconds, day, week, month, year as byte    ' Global date/time variables
dim var_in_global as integer
'module MyProject
dim txt,txt_inin as string[6]
dim kp,ok,k_set,chanel,Pwm_Percent,Pwm_chanel ,on_off as  integer
'dim on_off as  byte
'dim v as string[4]
dim year_new as byte
dim while_state_blinking,while_satat as bit
dim oldstate,oldstate_up,oldstate_down,oldstate_ok,oldstate_ww,while_state,while_satate_in_1 as bit
dim oldstate_4,oldstate_3,while_state_import,oldstate_2 as bit
' Lcd module connections
dim LCD_RS as sbit at PORTb0_bit
dim LCD_EN as sbit at PORTb2_bit
dim LCD_D4 as sbit at PORTb4_bit
dim LCD_D5 as sbit at PORTb5_bit
dim LCD_D6 as sbit at PORTb6_bit
dim LCD_D7 as sbit at PORTb7_bit

dim LCD_RS_Direction as sbit at DDb0_bit
dim LCD_EN_Direction as sbit at DDb2_bit
dim LCD_D4_Direction as sbit at DDb4_bit
dim LCD_D5_Direction as sbit at DDb5_bit
dim LCD_D6_Direction as sbit at DDb6_bit
dim LCD_D7_Direction as sbit at DDb7_bit

' Software I2C connections
dim Soft_I2C_Scl_Output    as sbit at PORTC0_bit
    Soft_I2C_Sda_Output    as sbit at PORTC1_bit
    Soft_I2C_Scl_Input     as sbit at PINC0_bit
    Soft_I2C_Sda_Input     as sbit at PINC1_bit
    Soft_I2C_Scl_Direction as sbit at DDC0_bit
    Soft_I2C_Sda_Direction as sbit at DDC1_bit
' End Software I2C connections
' Relay arraye
'structure On_arrayx
dim on_a_0 as integer[1][1][4]
'dim on_a as byte[7][5][7][4]
'    Week as byte[7][5]
'    Hour as byte[7][5]
'    minut as byte[7][5]
'end structure
'structure off_arrayx
'dim off_a as byte[7][5][2]
'    Week as byte[7][5]
'    Hour as byte[7][5]
'    minut as byte[7][5]
'end structure

' Lcd constants
dim txt1 as string[16]
    txt2 as string[10]
    txt3 as string[5]
    txt4 as string[5]
    text_1  as string[5]
  ' RTC Definitions
const RTC_ADDR = 0xD0
 '################### Shamsi to Mlady #####################
   dim miladiYear as integer
   dim miladiDate_iMonth,miladiDate_iYear,miladiDate_iDay as integer
 '################### Shamsi #####################
' dim uart_rd,counter,error_,receive,error,error1,data1 ,error2_,clk as byte
'dim cnt,hour1 as integer          ' Global variable cnt
Dim N2, Conter2 As Byte
Dim Year2 As Word
Dim Sec1 As Byte
Dim Jmonth_a As Byte[12]
Dim Gmonth_a As Byte[12]
Dim Gyear As Integer                                        'input gregorian(miladi) year
Dim Gday As Integer                                         'input gregorian day
Dim Gmonth As Integer
Dim Jday As Integer                                         'Output jalali(shamsi) day
Dim Jmonth As Integer                                       'Output Jalali month
Dim Jyear As Integer
Dim Gdayofyear As Integer
Dim Gyear_ As Integer                                       'Output Jalali year
Dim Jdayofyear As Integer
Dim Gnumdayofyear As Integer
Dim Isleapyear As Bit
Dim Isleapyearp As Bit
Dim Iloop As Byte
Dim Temp1 As Integer
Dim Temp2 As Integer                                        '***************** set hiter***** led *********
Dim Temp3 As Integer
Dim Temp4 As Integer
'#################### PWM   ############
dim current_duty as byte
    current_duty1 as byte
'########  End of PWM  #############
 '{**************************************************************************************************
'* Write time to RTC DS1307
'* input : variables with RTC data
'**************************************************************************************************}
sub procedure Write_Time(dim c_hours as byte, dim c_minutes as byte, dim c_seconds as byte,
               dim c_day as byte, dim c_week as byte, dim c_month as byte, dim c_year as byte)
   Soft_I2C_Start()                         ' issue start signal
   Soft_I2C_Write(RTC_ADDR)                 ' address DS1307
   Soft_I2C_Write(0)                        ' start from word at address (REG0)
   Soft_I2C_Write(0x80)                     ' write $80 to REG0. (pause counter + 0 sec)   ?? ??????? ????? ????? ?????

   Soft_I2C_Write(c_minutes)                ' write 0 to minutes word to (REG1)
   Soft_I2C_Write(c_hours)                  ' write 17 to hours word (24-hours mode)(REG2)
   Soft_I2C_Write(c_week)                   ' write 2 - Monday (REG3)
   Soft_I2C_Write(c_day)                    ' write 4 to date word (REG4)
   Soft_I2C_Write(c_month)                  ' write 5 (May) to month word (REG5)
   Soft_I2C_Write(c_year)                   ' write 01 to year word (REG6)
   Soft_I2C_Stop()                          ' issue stop signal

   Soft_I2C_Start()                         ' issue start signal
   Soft_I2C_Write(RTC_ADDR)                 ' address DS1307
   Soft_I2C_Write(0)                        ' start from word at address 0
   Soft_I2C_Write(0 and c_seconds)          ' write 0 to REG0 (enable counting + 0 sec)       ???? ??? ? ?????
   Soft_I2C_Stop()                          ' issue stop signal
end sub
 '**************************************************************************************************
'* Read_time
'**************************************************************************************************}
 '-------------------- Formats date and time
 sub procedure Read_Time(dim p_hours as ^byte, dim p_minutes as ^byte, dim p_seconds as ^byte,
              dim p_day as ^byte, dim p_week as ^byte, dim p_month as ^byte, dim p_year as ^byte)

  Soft_I2C_Start()                    ' Issue start signal
  Soft_I2C_Write(RTC_ADDR)            ' Address DS1307, see DS1307 datasheet
  Soft_I2C_Write(0)                   ' Start from address 0
  Soft_I2C_Start()                    ' Issue repeated start signal
  Soft_I2C_Write(RTC_ADDR + 1)        ' Address DS1307 for reading R/W=1

  p_seconds^ = Soft_I2C_Read(1)      ' Read seconds byte
  p_minutes^ = Soft_I2C_Read(1)      ' Read minutes byte
  p_hours^ = Soft_I2C_Read(1)        ' Read hours byte
  p_week^ = Soft_I2C_Read(1)
  p_day^ = Soft_I2C_Read(1)
  p_month^ = Soft_I2C_Read(1)
  p_year^ = Soft_I2C_Read(0)

  Soft_I2C_Stop()   ' Issue stop signal
end sub
sub procedure Lcd_0()
              Lcd_Init()
              Lcd_Cmd(_LCD_CLEAR)               ' Clear display
              Lcd_Cmd(_LCD_CURSOR_OFF)          ' Cursor off

end sub
  '**************************************************************************************************
'* Shamsi_transfer_time
'**************************************************************************************************}
 '-------------------- Formats date and time
sub procedure Shamsi_transfer_time()

   seconds  =  ((seconds and 0x70) >> 4)*10 + (seconds and 0x0F)
  minutes  =  ((minutes and 0xF0) >> 4)*10 + (minutes and 0x0F)
  hours    =  ((hours and 0x30) >> 4)*10 + (hours and 0x0F)
  week     =  (week and 0x07)
  day      =  ((day and 0xF0) >> 4)*10 + (day and 0x0F)
  month    =  ((month and 0x10) >> 4)*10 + (month and 0x0F)
  year     =  ((year and 0xF0) >> 4)*10+(year and 0x0F)
end sub

sub procedure Shamsi_show_lcd(dim jjmonth,jjday,jjyear,jweek,jhours ,jminutes,jseconds as integer)
  select case jweek
     case 1
      txt = "Sun"
     case 2
      txt = "Mon"
     case 3
      txt = "Tue"
     case 4
      txt = "Wed"
     case 5
      txt = "Thu"
     case 6
      txt = "Fri"
     case 7
      txt = "Sat"
  end select

  LCD_Out(1,1, txt)
  Lcd_Chr(1, 6, (jjday div 10)   + 48)    ' Print tens digit of day variable
  Lcd_Chr(1, 7, (jjday mod 10)   + 48)    ' Print oness digit of day variable
  Lcd_Chr(1, 9, (jjmonth div 10) + 48)
  Lcd_Chr(1,10, (jjmonth mod 10) + 48)
'  Lcd_Chr(1,14, txt)
  Lcd_Chr(1,12, (jjyear div 1000)  + 48)
  Lcd_Chr(1,13, ((jjyear mod 1000)div 100)  + 48)
  Lcd_Chr(1,14, (((jjyear mod 1000)mod 100) div 10)  + 48)
  Lcd_Chr(1,15, (((jjyear mod 1000)mod 100) mod 10)  + 48)

  Lcd_Chr(2, 6, (jhours div 10)   + 48)
  Lcd_Chr(2, 7, (jhours mod 10)   + 48)
  Lcd_Chr(2, 9, (jminutes div 10) + 48)
  Lcd_Chr(2,10, (jminutes mod 10) + 48)
  Lcd_Chr(2,12, (jseconds div 10) + 48)
  Lcd_Chr(2,13, (jseconds mod 10) + 48)

end sub
    '* ???????? ?????? ?? ????
'* input : variables with RTC data
'**************************************************************************************************}
sub procedure shamsi_to_milady(dim ShamsiMonth, ShamsiDay, ShamsiYear as integer)
' Declare a constant array which holds number of days in each month:
'const Gmonth_a as byte[12] = (31,28,31,30,31,30,31,31,30,31,30,31)
dim miladiYear2,miladiYear,marchDayDiff,Temp5, remainDay as integer
dim farvardin1st_iMonth,farvardin1st_iDay,dayCount,i as integer
'dim miladiDate_iMonth,miladiDate_iDay,miladiDate_iYear  as integer
Dim Mmonth_a As Byte[12]
structure farvardin1st_2
  dim iMonth,iDay as integer
end structure
'const Mmonth_a as byte[12]   =  (30,31,30,31,31,30,31,30,31,31,28,31)
       Mmonth_a[0] = 30
       Mmonth_a[1] = 31
       Mmonth_a[2] = 30
       Mmonth_a[3] = 31
       Mmonth_a[4] = 31
       Mmonth_a[5] = 30
       Mmonth_a[6] = 31
       Mmonth_a[7] = 30
       Mmonth_a[8] = 31
       Mmonth_a[9] = 31
       Mmonth_a[10] = 28
       Mmonth_a[11] = 31

      miladiYear = ShamsiYear + 621
      miladiYear2=miladiYear
      Temp1 = miladiYear2 Mod 4
      Temp2 = miladiYear2 Mod 100
      Temp3 = miladiYear2 Mod 400
      Temp4 = (( Temp2 <> 0) and ( Temp1 = 0) )
      Temp5=((Temp2 = 0) and (Temp3 = 0) )
'      if(((((miladiYear mod  100)<> 0) and ((miladiYear mod 4) = 0))) or ((((miladiYear mod 100)= 0) and (miladiYear mod 400) = 0))) then
      if(Temp4 or temp5) then

'      If (Temp4 <> 0 ) or Temp3 = 0    Then
        farvardin1st_iMonth = 3
        farvardin1st_iDay = 20
        marchDayDiff = 12
      Else
         farvardin1st_iMonth = 3
         farvardin1st_iDay =21
         marchDayDiff = 11
      End If
      if(((((miladiYear+1 mod  100)<> 0) and ((miladiYear+1 mod 4) = 0))) or ((((miladiYear+1 mod 100)= 0) and (miladiYear+1 mod 400) = 0))) then

         Mmonth_a[10] = Mmonth_a[10] + 1 '//Adding one day to Feb
       end if

       if((ShamsiMonth>=1)and( ShamsiMonth<=6))   then
           dayCount = ((ShamsiMonth-1) * 31) + ShamsiDay
       else
           dayCount =(6 * 31) + ((ShamsiMonth - 7) * 30) + ShamsiDay
       end if
       if (dayCount <= marchDayDiff) then '//So we are in 20(for leap year) or 21for none leap year) to 31 march

          miladiDate_iDay = dayCount + (31 - marchDayDiff)
          miladiDate_iMonth = 3
          miladiDate_iYear=miladiYear

      else
          remainDay = dayCount - marchDayDiff
      end if
       i = 0  ' //starting from April

       while ((remainDay > Mmonth_a[i]))

             remainDay = remainDay - Mmonth_a[i]
             i=i+1

       wend
      miladiDate_iDay = remainDay

      if (i > 8)  then '// We are in the next Miladi Year

         miladiDate_iMonth = i - 8
         miladiDate_iYear =  miladiYear + 1

     else

         miladiDate_iMonth = i + 4
         miladiDate_iYear =  miladiYear
     end if


end sub
   '* ???????? ?????? ?? ????
'* input : variables with RTC data
'**************************************************************************************************}
sub procedure shamsi()
' Declare a constant array which holds number of days in each month:
'const Gmonth_a as byte[12] = (31,28,31,30,31,30,31,31,30,31,30,31)

  Gmonth_a[0] = 31
  Gmonth_a[1] = 28
  Gmonth_a[2] = 31
  Gmonth_a[3] = 30
  Gmonth_a[4] = 31
  Gmonth_a[5] = 30
  Gmonth_a[6] = 31
  Gmonth_a[7] = 31
  Gmonth_a[8] = 30
  Gmonth_a[9] = 31
  Gmonth_a[10] = 30
  Gmonth_a[11] = 31
  Gnumdayofyear = 365
  Gdayofyear = 0
  Temp1 = Gyear Mod 4
  Temp2 = Gyear Mod 100
  Temp3 = Gyear Mod 400
  Temp4 = Temp1 And Temp2
  If (Temp4 <> 0) Or (Temp3 = 0) Then
'  If (Temp4 = 0 ) and (Temp3 <> 0)    Then
    Gmonth_a[1] = 28
  Else
      Gmonth_a[1] = 29
  End If


  Gyear_ = Gyear - 1
  Temp1 = Gyear_ Mod 4
  Temp2 = Gyear_ Mod 100
  Temp3 = Gyear_ Mod 400
  Temp4 = Temp1 And Temp2
  If (Temp4 <> 0) Or (Temp3 = 0) Then
      Isleapyearp =0
  Else
      Isleapyearp=1
  End If
  Temp1 = Gmonth - 1
  For Iloop = 1 To Temp1
      Gdayofyear = Gmonth_a[iloop-1] + Gdayofyear
  Next   Iloop
      Gdayofyear = Gday + Gdayofyear
  If Gdayofyear > 79 Then
                Temp1 = Gdayofyear - 79
                Jyear = Gyear - 621
                If Temp1 < 186 Then
                   Temp2 = Temp1 Mod 31
                   Temp3 = Temp1 / 31
                   If Temp2 = 0 Then
                      Jmonth = Temp3
                      Jday = 31
                   Else
                       Jmonth = Temp3 + 1
                       Jday = Temp2
                   End If
                Else
                    Temp2 = Temp1 - 186
                    Temp3 = Temp2 Mod 30
                    Temp4 = Temp2 / 30
                    If Temp3 = 0 Then
                       Jmonth = Temp4 + 6
                       Jday = 30
                    Else
                        Jmonth = Temp4 + 7
                        Jday = Temp3
                    End If
                End If
   Else
       Jyear = Gyear - 622
       If Isleapyearp  Then
          Gdayofyear = Gdayofyear + 11
       Else
          Gdayofyear = Gdayofyear + 10
       End If
       Temp2 = Gdayofyear Mod 30
       Temp3 = Gdayofyear / 30
       If Temp2 = 0 Then
          Jmonth = Temp3 + 9
          Jday = 30
       Else
           Jmonth = Temp3 + 10
           Jday = Temp2
       End If
       Delay_ms(1)
  End If

end sub
sub procedure miladi_call(dim jjmonth,jjday,jjyear,jweek,jhours ,jminutes,jseconds as integer)

'  Lcd_Init()                        ' Initialize Lcd
  Lcd_0()
  shamsi_to_milady( jjmonth, jjday, jJyear )
  select case jweek
     case 1
      txt = "Sun"
     case 2
      txt = "Mon"
     case 3
      txt = "Tue"
     case 4
      txt = "Wed"
     case 5
      txt = "Thu"
     case 6
      txt = "Fri"
     case 7
      txt = "Sat"
  end select

  LCD_Out(1,1, txt)
  Lcd_Chr(1, 6, (miladiDate_iDay div 10)   + 48)    ' Print tens digit of day variable
  Lcd_Chr(1, 7, (miladiDate_iDay mod 10)   + 48)    ' Print oness digit of day variable
  Lcd_Chr(1, 9, (miladiDate_iMonth div 10) + 48)
  Lcd_Chr(1,10, (miladiDate_iMonth mod 10) + 48)
  Lcd_Chr(1,12, (miladiDate_iYear div 1000)  + 48)
  Lcd_Chr(1,13, ((miladiDate_iYear mod 1000)div 100)  + 48)
  Lcd_Chr(1,14, (((miladiDate_iYear mod 1000)mod 100) div 10)  + 48)
  Lcd_Chr(1,15, (((miladiDate_iYear mod 1000)mod 100) mod 10)  + 48)

  Lcd_Chr(2, 6, (jhours div 10)   + 48)
  Lcd_Chr(2, 7, (jhours mod 10)   + 48)
  Lcd_Chr(2, 9, (jminutes div 10) + 48)
  Lcd_Chr(2,10, (jminutes mod 10) + 48)
  Lcd_Chr(2,12, (jseconds div 10) + 48)
  Lcd_Chr(2,13, (jseconds mod 10) + 48)

  Delay_mS(1000)
end sub
'**************************************************************************************************
'* Call Shamsi
'**************************************************************************************************}
  sub procedure Shamsi_call()
'      Read_Time(@hours, @minutes, @seconds, @day, @week, @month, @year)

     Shamsi_transfer_time()

      Gyear =  Year+2000
      Gday = Day
      Gmonth = Month
'
     shamsi()

'     Day = Jday
'     Year2 = Jyear
'     Jyear=jyear -1300
'     Month = Jmonth
     Lcd_Cmd(_LCD_CLEAR)               ' Prepare and output static text on LCD
'     ByteToStr(Year2, txt)
'     IntToStr(Jyear, txt)
'     Display_Time()
     ''Shamsi_show_lcd( jmonth,jday,jyear,week,hours ,minutes,seconds )

   ''Delay_mS(1000)

   ''miladi_call(jmonth,jday,jyear,week,hours ,minutes,seconds )
  end sub

'**************************************************************************************************
'* Keypad PROGRAM
'**************************************************************************************************}
 sub procedure Keypad_set__date_time_import(dim var_in as integer, dim p_max as  integer, dim p_min as  integer )
'    dim oldstate_4,oldstate_3,while_state_import,oldstate_2 as bit
      Delay_mS(200)
    while_state_import=1
    oldstate_2=0
  while  (while_state_import )
    if (Button(PORTA, 5, 0.1, 0)) then    ' Detect logical one up key
            oldstate_3 = 1                      ' Update flag
    end if
    if (oldstate_3 and Button(PINA, 5,0.1, 1)) then
          if (var_in=p_max) then
              var_in=p_min
          else
             var_in=var_in+1
          end if
          Lcd_0()
          inttostr(var_in,txt)
          LCD_Out(2,9, txt)  ''Show on LCD
          LCD_Out(2,5, "Value : ")  ''Show on LCD
          Delay_mS(200)
    end if

           oldstate_3 = 1                      ' Update flag

    if (Button(PORTA, 4, 0.1, 0)) then    ' Detect logical one Down key
            oldstate_3 = 1                      ' Update flag
    end if
    if (oldstate_3 and Button(PINA, 4,0.1, 1)) then
          if (var_in=p_min) then
              var_in=p_max
          else
             var_in=var_in-1
          end if
          Lcd_0()
          inttostr(var_in,txt)
          LCD_Out(2,11, txt)  ''Show on LCD
          LCD_Out(2,5, "Value : ")  ''Show on LCD
          Delay_mS(200)

    end if
    var_in_global=var_in

    if (Button(PIND, 2, 0.1, 0)<> 0) then    ' Detect logical one setting key
            oldstate_2 = 1                      ' Update flag
        end if
        if (oldstate_2 and Button(PIND, 2,0.1, 1)) then
           oldstate_2 = 0
           while_state_import=0
           Lcd_0()
           LCD_Out(2,1, "Exit No save !!! ")  ''Show on LCD
           Delay_mS(500)
         end if

    if (Button(PINA, 6, 0.1, 0)<> 0) then    ' Detect logical one setting key
            oldstate_3 = 1                      ' Update flag
        end if
        if (while_state_import and oldstate_3 and Button(PINA, 6,0.1, 1)) then
          while_state_import=0
          oldstate_3 = 0
          inttostr(var_in_global,txt)
                LCD_Out(2,11, txt)  ''Show on LCD
                LCD_Out(2,5, "Value :")  ''Show on LCD
                Delay_mS(200)
        end if
    var_in_global= var_in
  wend
 end sub


   sub procedure Keypad_set__date_time_import_lcd(dim var_in, p_max , p_min as  integer  )

               Lcd_0()
'               LCD_Out(2,1, "month seting0")  ''Show on LCD
               k_set=94
               inttostr(k_set,txt)
                LCD_Out(2,2, txt)  ''Show on LCD
'               Read_Time(@hours, @minutes, @seconds, @day, @week, @month, @year)
'               Shamsi_transfer_time()
'               IntToStr(var_in, txt)
               LCD_Out(2,1, text_1)  ''Show on LCD
               LCD_Out(2,8, "seting2")  ''Show on LCD
               Lcd_Chr(2, 3, 94)
               Delay_mS(500)
               Keypad_set__date_time_import(var_in,p_max,p_min)
'               month=var_in_global
'               var_in_global
'               year=year+ 1

               inttostr(var_in_global,txt)
                LCD_Out(2,2, txt)  ''Show on LCD
                Delay_mS(500)
                 'Write TIME    11  : 15  : 00  : 24.  tuesday april  2012
'                 Write_Time(0x11, 0x15, 0x00, 0x24, 0x03,   0x04, 0x12)'
'                  Delay_mS(3500)


                    Lcd_0()


                   inttostr(month,txt)
                   LCD_Out(1,2, "int2str")  ''Show on LCD
                   LCD_Out(1,6,text_1)  ''Show on LCD
                   LCD_Out(2,2, txt)  ''Show on LCD

'                   a = month
'                   year_new = Dec2Bcd(a) ' b equals 34
'                   Read_Time(@hours, @minutes, @seconds, @day, @week, @month, @year)
'                   Write_Time(Dec2Bcd(hours), Dec2Bcd(minutes), Dec2Bcd(seconds), Dec2Bcd(day), Dec2Bcd(week),   Dec2Bcd(month),  Dec2Bcd(year))'
'                   Delay_mS(500)
'               var_in_global
'               year=year+ 1

'              Keypad_set__date_time()
              k_set = 1  ' 1
  end sub

   '**************************************************************************************************
'* Keypad PROGRAM
'**************************************************************************************************}
 sub procedure Keypad_set__date_time()
    dim  txt1 as string[4]
    dim while_state_2,oldstate_2,oldstate_3,oldstate_menu as bit
    dim kp,ok,k_set,Ex as  integer
' Read_Time(@hours, @minutes, @seconds, @day, @week, @month, @year)
'   Transform_Time()
'   Shamsi_transfer_time()

        oldstate_2 = 0
        oldstate_3 = 0
        oldstate_menu = 0
        while_state_2=1
        k_set=0  ex=0
        Lcd_0()

         Read_Time(@hours, @minutes, @seconds, @day, @week, @month, @year)
         Shamsi_call()
'          jmonth,jday,jyear,week,hours ,minutes,seconds
        while  (while_state_2 )
        LCD_Out(1,1, "while : ")  ''Show on LCD
        Delay_mS(100)
      if (Button(PIND, 2, 0.1, 0)<> 0) then    ' Detect logical one setting key
            oldstate_2 = 1                      ' Update flag
        end if
        if (oldstate_2 and Button(PIND, 2,0.1, 1)) then
           oldstate_2 = 0
           oldstate_menu=1
          k_set=k_set+1
          if k_set=8  then
             k_set=1
          end if
          inttostr(k_set,txt)
                LCD_Out(2,9, txt)  ''Show on LCD
                LCD_Out(2,1, "Position : ")  ''Show on LCD
                Delay_mS(100)
         end if
       if (Button(PINA, 6, 0.1, 0)<> 0) then    ' Detect logical one setting key
            oldstate_3 = 1                      ' Update flag
        end if
        if (oldstate_menu and oldstate_3 and Button(PINA, 6,0.1, 1)) then
'          while_state_2=0
          oldstate_3 = 0
'          Read_Time(@hours, @minutes, @seconds, @day, @week, @month, @year)
'          Shamsi_transfer_time()
          select case k_set


            case 1
                  text_1="Year"
                  Keypad_set__date_time_import_lcd(year, 100 , 0  )
                  year   =var_in_global
                  

            case 2
'
               text_1="Mounths"
                  Keypad_set__date_time_import_lcd(month,12 , 1  )
                  month   =var_in_global

            case 3

                  text_1="day"
                  Keypad_set__date_time_import_lcd(day,31 , 1  )
                  day   =var_in_global

            case 4

                  text_1="week"
                  Keypad_set__date_time_import_lcd(week,7 , 1  )
                  week   =var_in_global


            case 5

               text_1="hours"
                  Keypad_set__date_time_import_lcd(hours,23 , 0  )
                  hours   =var_in_global
            case 6
                text_1="minutes"
                  Keypad_set__date_time_import_lcd(minutes,59 , 0  )
                  minutes   =var_in_global
            case 7
                text_1="<Exit>"
                  Keypad_set__date_time_import_lcd(ex,1 , 0  )
                  ex =var_in_global
                  if ex=1 then
                            while_state_2=0
                  end if
          end select
          Write_Time(Dec2Bcd(hours), Dec2Bcd(minutes), Dec2Bcd(seconds), Dec2Bcd(day), Dec2Bcd(week),   Dec2Bcd(month),  Dec2Bcd(year))'
          Delay_mS(500)
        end if                      ' Update flag

     wend
 end sub
 
 

   '**************************************************************************************************
'* Keypad PROGRAM
'**************************************************************************************************}
 sub procedure Keypad_Relay_set__date_time()
    dim  txt1 as string[4]
    dim while_state_2,oldstate_2,oldstate_3,oldstate_menu as bit
    dim kp,ok,k_set,ex as  integer
'    dim on_a_1 as byte[7][5][2]
'    dim on_a as byte[7][5][7][4]
' Read_Time(@hours, @minutes, @seconds, @day, @week, @month, @year)
'   Transform_Time()
'   Shamsi_transfer_time()

        oldstate_2 = 0    week=2 chanel=1 Pwm_chanel=1 hours=0  minutes=0
        oldstate_3 = 0                ex=0
        oldstate_menu = 0
        while_state_2=1
        k_set=0            on_off=1   chanel=1
        Lcd_0()

'         Read_Time(@hours, @minutes, @seconds, @day, @week, @month, @year)
'         Shamsi_call()
'          jmonth,jday,jyear,week,hours ,minutes,seconds
        while  (while_state_2 )
        LCD_Out(1,1, "while : ")  ''Show on LCD
        Delay_mS(100)
      if (Button(PIND, 2, 0.1, 0)<> 0) then    ' Detect logical one setting key
            oldstate_2 = 1                      ' Update flag
        end if
        if (oldstate_2 and Button(PIND, 2,0.1, 1)) then
           oldstate_2 = 0
           oldstate_menu=1
          k_set=k_set+1
          if k_set=10  then
             k_set=1
          end if
          inttostr(k_set,txt)
                LCD_Out(2,9, txt)  ''Show on LCD
                LCD_Out(2,1, "Position : ")  ''Show on LCD
                Delay_mS(100)
         end if
       if (Button(PINA, 6, 0.1, 0)<> 0) then    ' Detect logical one setting key
            oldstate_3 = 1                      ' Update flag
        end if
        if (oldstate_menu and oldstate_3 and Button(PINA, 6,0.1, 1)) then
'          while_state_2=0
          oldstate_3 = 0
'          Read_Time(@hours, @minutes, @seconds, @day, @week, @month, @year)
'          Shamsi_transfer_time()
          select case k_set


            case 1   'one and off

                  text_1="On and Off" Delay_mS(1100)
                  Keypad_set__date_time_import_lcd(on_off,1 , 0  )
                  on_off   =var_in_global
                  on_a_0[chanel-1][Pwm_chanel-1][0]=on_off
                  Lcd_0()
                  LCD_Out(1,11, "ssssssssssss") Delay_mS(1100)
                  inttostr(on_a_0 [chanel-1][pwm_chanel-1][0],txt)                     ' ??? ????? ???? ? ?????? ????? ? ????
                  LCD_Out(1,11, txt)
                  Delay_mS(1100)

            case 2

                  text_1="week"
                  Keypad_set__date_time_import_lcd(week,7 , 1  )
                  week   =var_in_global


            case 3
                  text_1="Chanel"
                  Keypad_set__date_time_import_lcd(chanel, 5 , 1  )
                  chanel   =var_in_global
            
            case 4
            

               text_1="hours"
                  Keypad_set__date_time_import_lcd(hours,23 , 0  )
                  hours   =var_in_global
                  on_a_0[chanel-1][Pwm_chanel-1][1]=hours
'                  on_a[week][chanel][0]=hours
            case 5
                text_1="minutes"
                  Keypad_set__date_time_import_lcd(minutes,59 , 0  )
                  minutes   =var_in_global
                  on_a_0[chanel-1][Pwm_chanel-1][2]=minutes
'                  on_a[week][chanel][1]=minutes

'
           case 6   'pwm chnael color
                  text_1="PWM Chanel color"
                  Keypad_set__date_time_import_lcd(Pwm_chanel, 7 , 1  )
                  Pwm_chanel   =var_in_global

'                  on_a[week-1][chanel-1][on_off][Pwm_chanel-1][2]=Pwm_chanel
'
           case 7   'pwm Precent
                  text_1="PWM Precent"
                  Keypad_set__date_time_import_lcd(Pwm_Percent, 100 , 0  )
                  Pwm_Percent   =var_in_global
                  on_a_0[chanel-1][Pwm_chanel-1][3]=Pwm_Percent
'

            case 8  'Save key
                 text_1="<Save> and Exit"
                  Keypad_set__date_time_import_lcd(ex,1 , 0 )
                  ex   =var_in_global
                 if ex=1 then
                    while_state_2=0
                    Lcd_0()
                     LCD_Out(2,1, "on_a_0=on_a ")  ''Show on LCD
                     delay_ms(1500)
'                     on_a_0=on_a
                     LCD_Out(2,1, "on_a_0=on_a  2")  ''Show on LCD
                    inttostr(on_a_0 [chanel-1][pwm_chanel-1][0],txt)                     ' ??? ????? ???? ? ?????? ????? ? ????
                    LCD_Out(1,11, txt)
                    delay_ms(1500)
                 end if

'               text_1="off"
'                  Keypad_set__date_time_import_lcd(month,12 , 1  )
'                  month   =var_in_global
'

            case 9  'exit key
                 text_1="<Exit> No save"
                  Keypad_set__date_time_import_lcd(ex,1 , 0 )
                  ex   =var_in_global
                 if ex=1 then
                    while_state_2=0
                 end if



          end select

'          Write_Time(Dec2Bcd(hours), Dec2Bcd(minutes), Dec2Bcd(seconds), Dec2Bcd(day), Dec2Bcd(week),   Dec2Bcd(month),  Dec2Bcd(year))'
          Delay_mS(100)
        end if                      ' Update flag

     wend
 end sub
 sub procedure Keypad_Relay_set__date_time_1()

   Lcd_0()
   txt1 = " On  Off  <Exit>"
  Lcd_Out(1,1,txt1)
  Lcd_Chr(2, 3, 94)
  Lcd_Chr(2, 2, 94)
  Lcd_Chr(2, 4, 94)
  Delay_ms(500)                    ' delay 2 sec
  kp=0
  ok=0


     oldstate = 0
     oldstate_up=0
     oldstate_down=0
     oldstate_ok=0
     oldstate_ww=0
     while_state=1
     while_satate_in_1=1
   while  (while_satate_in_1 )
'    if (PINA1_bit <> 0) then
      if (Button(PIND, 2, 0.1, 1)<> 0) then    ' Detect logical one setting key
      Lcd_0()
      oldstate = 1                      ' Update flag
       end if
    if (oldstate and Button(PIND, 2, 0.1, 0)) then    ' Detect one-to-zero transition
       oldstate = 0
       while_state=0
       while_satate_in_1=0
        kp=1
       txt1 = "<Exit> is Selected"
       Lcd_Out(1,1,txt1)
      Delay_mS(500)
       Lcd_0()
      Delay_mS(500)
       txt1 = "<Exit> is Selected"
       Lcd_Out(1,1,txt1)
       Delay_mS(500)
'      LCD_Out(2,1, " date Setting")  ''Show on LCD
'      intToStr(kp,txt)
'      LCD_Out(2,9, txt)  ''Show on LCD
       Delay_mS(500)
    end if
     if (Button(PINA, 4, 0.1, 1)<> 0) then    ' Detect logical down setting key
      oldstate_down = 1                      ' Update flag
     end if
    if (oldstate_down and Button(PINA, 4, 0.1, 0)) then    ' Detect one-to-zero transition
        oldstate_down=0
            Lcd_0()
            txt1 = " On  Off  <Exit>"
           if (kp=0) then  '<Exit mode>
              kp=2
'              txt1 = "On Off <Exit>"
              Lcd_Out(1,1,txt1)
              Lcd_Chr(2, 13, 94)
              Lcd_Chr(2, 14, 94)
              Lcd_Chr(2, 15, 94)
            else
             kp=kp-1
            if (kp=0) then            ' ON Mode

'              txt1 = "Setting   <Exit>"
             Lcd_Out(1,1,txt1)
             Lcd_Chr(2, 3, 94)
             Lcd_Chr(2, 2, 94)
             Lcd_Chr(2, 4, 94)
            end if

            if (kp=1) then            ' Off  Mode

'              txt1 = "Setting   <Exit>"
             Lcd_Out(1,1,txt1)
             Lcd_Chr(2, 6, 94)
             Lcd_Chr(2, 7, 94)
             Lcd_Chr(2, 8, 94)
            end if
            end if

      Delay_mS(500)
    end if
    if (Button(PINA, 5, 0.1, 1)<> 0) then    ' Detect logical one setting key
      oldstate_up = 1                      ' Update flag
      end if
      if ((oldstate_up) and (Button(PINA, 5, 0.1, 0))) then    ' Detect one-to-zero transition
            oldstate_up=0
           Lcd_0()
           txt1 = " On  Off  <Exit>"
            if (kp=2) then
              kp=0
'              txt1 = "Setting   <Exit>"
             Lcd_Out(1,1,txt1)
             Lcd_Chr(2, 3, 94)
             Lcd_Chr(2, 2, 94)
             Lcd_Chr(2, 4, 94)
            else
              kp=kp+1
              if (kp=2) then            ' ON Mode

'              txt1 = "Setting   <Exit>"
              Lcd_Out(1,1,txt1)
              Lcd_Chr(2, 13, 94)
              Lcd_Chr(2, 14, 94)
              Lcd_Chr(2, 15, 94)
              end if

              if (kp=1) then            ' Off  Mode

'              txt1 = "Setting   <Exit>"
               Lcd_Out(1,1,txt1)
               Lcd_Chr(2, 6, 94)
               Lcd_Chr(2, 7, 94)
               Lcd_Chr(2, 8, 94)
              end if
            end if

      Delay_mS(500)
    end if

    if (Button(PINA, 6, 0.1, 1)<> 0) then    ' Detect logical one setting key
      oldstate_ok =1
    end if
      if ((oldstate_ok) and (while_satate_in_1) and (Button(PINA, 6, 0.1, 0))) then    ' Detect one-to-zero transition
      while_state=0
      while_satate_in_1=0
      Lcd_0()
      oldstate_ok = 1                      ' Update flag
      if (kp=0) then
        LCD_Out(1,1, "Setting is actived")  ''Show on LCD
      else
        LCD_Out(1,1, "Exit is aitctived")  ''Show on LCD
      end if
'      inttostr(kp,txt)
'      LCD_Out(2,8, txt)  ''Show on LCD
      Delay_mS(500)
      end if


   wend

'


          select case kp
           'case 10: kp = 42   ' "*"        ' Uncomment this block for keypad4x3
           'case 11: kp = 48   ' "0"
           'case 12: kp = 35   ' "#"
           'default: kp += 48
            case 0
              kp = 0  ' 1               ' ??? ????? ???? ? ?????? ????? ? ????

              txt1 = " On  Off  <Exit>"
              Keypad_Relay_set__date_time()
'                Keypad_3()
                inttostr(kp,txt)
                LCD_Out(1,1, txt)  ''Show on LCD
                inttostr(kp,txt)
                LCD_Out(2,9, txt)  ''Show on LCD
                LCD_Out(2,1, "Case  Ok is selected ")  ''Show on LCD
                Delay_mS(500)
            case 1

'                Shamsi_call()
                inttostr(kp,txt)
                LCD_Out(1,1, txt)  ''Show on LCD
                inttostr(kp,txt)
                LCD_Out(2,9, txt)  ''Show on LCD
                LCD_Out(2,1, "Case Exit is selected ")  ''Show on LCD
              kp = 1  ' 1               ' ????? ???? ? ????? ???

          end select


 end sub
 '**************************************************************************************************
'* Keypad PROGRAM
'**************************************************************************************************}
 sub procedure Keypad_Blinking(dim kp1,Kp_max,Kp_min,sate as integer)
 oldstate_up=0  oldstate=0 oldstate_down=0 oldstate_ok=0 while_satat=1
  if (Button(PIND, 2, 0.1, 1)<> 0) then    ' Detect logical one setting key
      oldstate = 1
      Lcd_0()
      txt1 = "<Exit is selected>"
       Lcd_Out(1,1,txt1)
      Delay_mS(400)                      ' Update flag
   end if
    if (oldstate and Button(PIND, 2, 0.1, 0)) then    ' Detect one-to-zero transition
       oldstate = 0
       while_state_blinking=0
       while_satat=0
       while_satate_in_1=0
       kp=3
     end if
      if (Button(PINA, 4, 0.1, 1)<> 0) then    ' Detect logical down setting key
      oldstate_down = 1                      ' Update flag
      Delay_mS(200)
     end if
    if (oldstate_down and Button(PINA, 4, 0.1, 0)) then    ' Detect one-to-zero transition
        oldstate_down=0
        while_state_blinking=0
          Lcd_Cmd(_LCD_CLEAR)               ' Clear display
            Lcd_Cmd(_LCD_CURSOR_OFF)          ' Cursor off
           if (kp=Kp_min) then
              kp=Kp_Max
              txt1 = "Cal Rel Pwm <Ex>"
              Lcd_Out(1,1,txt1)
              Lcd_Chr(2, 13, 94)
              Lcd_Chr(2, 14, 94)
              Lcd_Chr(2, 15, 94)
            else
            kp=kp-1
              if kp =0 then

                 txt1 = "Cal Rel Pwm <Ex>"
                 Lcd_Out(1,1,txt1)
                 Lcd_Chr(2, 1, 94)
                 Lcd_Chr(2, 2, 94)
                 Lcd_Chr(2, 3, 94)
              end if
              if kp =1 then

                 txt1 = "Cal Rel Pwm <Ex>"
                 Lcd_Out(1,1,txt1)
                 Lcd_Chr(2, 5, 94)
                 Lcd_Chr(2, 6, 94)
                 Lcd_Chr(2, 7, 94)
              end if
              if kp =2 then

                 txt1 = "Cal Rel Pwm <Ex>"
                 Lcd_Out(1,1,txt1)
                 Lcd_Chr(2, 9, 94)
                 Lcd_Chr(2, 10, 94)
                 Lcd_Chr(2, 11, 94)
              end if
            end if
    end if
     if (Button(PINA, 5, 0.1, 1)<> 0) then    ' Detect logical UP setting key
      oldstate_up = 1                      ' Update flag
      Delay_mS(200)

      end if
      if ((oldstate_up) and (Button(PINA, 5, 0.1, 0))) then    ' Detect one-to-zero transition
            oldstate_up=0
            while_state_blinking=0
            Lcd_0()
           if (kp=Kp_Max) then
              kp=Kp_min
                 txt1 = "Cal Rel Pwm <Ex>"
                 Lcd_Out(1,1,txt1)
                 Lcd_Chr(2, 1, 94)
                 Lcd_Chr(2, 2, 94)
                 Lcd_Chr(2, 3, 94)
            else
            kp=kp+1
              if kp =3 then
                 txt1 = "Cal Rel Pwm <Ex>"
                 Lcd_Out(1,1,txt1)
                 Lcd_Chr(2, 13, 94)
                 Lcd_Chr(2, 14, 94)
                 Lcd_Chr(2, 15, 94)
              end if
              if kp =1 then
                 txt1 = "Cal Rel Pwm <Ex>"
                 Lcd_Out(1,1,txt1)
                 Lcd_Chr(2, 5, 94)
                 Lcd_Chr(2, 6, 94)
                 Lcd_Chr(2, 7, 94)
              end if
              if kp =2 then
                 txt1 = "Cal Rel Pwm <Ex>"
                 Lcd_Out(1,1,txt1)
                 Lcd_Chr(2, 9, 94)
                 Lcd_Chr(2, 10, 94)
                 Lcd_Chr(2, 11, 94)
              end if

            end if


      end if
      if (Button(PINA, 6, 0.1, 1)<> 0) then    ' Detect logical one setting key
      oldstate_ok =1
      Lcd_0()
      txt1 = "ok"
       Lcd_Out(1,1,txt1)
      Delay_mS(400)
    end if
     if ((oldstate_ok)  and (Button(PINA, 6, 0.1, 0))) then    ' Detect one-to-zero transition
      oldstate_ok=0
       while_state_blinking=0
      while_satate_in_1=0
      while_satat=0
     end if
'     txt1 = "enterrrrr"
'     Lcd_Out(1,1,txt1)
 end sub

'**************************************************************************************************
'* Keypad PROGRAM
'**************************************************************************************************}
 sub procedure Lcd_Keypad_3(dim q_1,q_2,q_3,ch as integer)
'                  txt1 = "Cal Rel Pwm <Ex>"
                 Lcd_Out(1,1,txt1)
                 Lcd_Chr(2, q_1, ch)
                 Lcd_Chr(2, q_2, ch)
                 Lcd_Chr(2, q_3, ch)
                 Delay_mS(500)
 end sub
'**************************************************************************************************
'* Keypad PROGRAM
'**************************************************************************************************}
 sub procedure Keypad_3()

'  dim oldstate,oldstate_up,oldstate_down,oldstate_ok,oldstate_ww,while_state as bit
'  dim kp,ok,k_set as  integer
  kp=0
  ok=0



     oldstate = 0
     oldstate_up=0
     oldstate_down=0
     oldstate_ok=0
     oldstate_ww=0
     while_state=1
'     while_state_blinking=1
     while_satate_in_1=1
     txt1 = "Cal Rel Pwm <Ex>"
'      txt1 = ttt
'     while (while_state_blinking)
'                 Lcd_Cmd(_LCD_BLINK_CURSOR_ON)
'                 Delay_mS(500)
                  Lcd_Keypad_3(1,2,3,94)
'                 txt1 = "Cal Rel Pwm <Ex>"
'                 Lcd_Out(1,1,txt1)
'                 Lcd_Chr(2, 1, 94)
'                 Lcd_Chr(2, 2, 94)
'                 Lcd_Chr(2, 3, 94)
'                 Delay_mS(500)
'                 txt1 = "    Rel Pwm <Ex>"
'                 Lcd_Out(1,1,txt1)
'                 Lcd_Chr(2, 1, " ")
'                 Lcd_Chr(2, 2, " ")
'                 Lcd_Chr(2, 3, " ")
'                Keypad_Blinking( kp,3,0,while_satate_in_1)
'                while_satate_in_1=while_satat
'     wend
'     txt1 = "LOOP"
'       Lcd_Out(1,1,txt1)
'       Delay_mS(1100)
'     while_satate_in_1=1
   while  (while_satate_in_1 )
'    if (PINA1_bit <> 0) then
      if (Button(PIND, 2, 0.1, 1)<> 0) then    ' Detect logical one setting key
      Lcd_0()
      oldstate = 1                      ' Update flag
       end if
    if (oldstate and Button(PIND, 2, 0.1, 0)) then    ' Detect one-to-zero transition
       oldstate = 0
       while_state=0
       while_satate_in_1=0
        kp=3
       txt1 = "<Exit> is Selected"
       Lcd_Out(1,1,txt1)
      Delay_mS(500)
      Lcd_Cmd(_LCD_CLEAR)               ' Clear display
      Lcd_Cmd(_LCD_CURSOR_OFF)          ' Cursor off
      Delay_mS(500)
       txt1 = "<Exit> is Selected"
       Lcd_Out(1,1,txt1)
       Delay_mS(500)
'      LCD_Out(2,1, " date Setting")  ''Show on LCD
'      intToStr(kp,txt)
'      LCD_Out(2,9, txt)  ''Show on LCD
       Delay_mS(500)
    end if
     if (Button(PINA, 4, 0.1, 1)<> 0) then    ' Detect logical down setting key
      oldstate_down = 1                      ' Update flag
     end if
    if (oldstate_down and Button(PINA, 4, 0.1, 0)) then    ' Detect one-to-zero transition
        oldstate_down=0
            Lcd_0()
           if (kp=0) then
              kp=3
              Lcd_Keypad_3(13,14,15,94)
'              while_state_blinking=1
'              while while_state_blinking
'                 txt1 = "Cal Rel Pwm <Ex>"
'                 Lcd_Out(1,1,txt1)
'                 Delay_mS(500)
'                 txt1 = "cal Rel Pwm     "
'                 Lcd_Out(1,1,txt1)
'                 Lcd_Chr(2, 13, 94)
'                 Lcd_Chr(2, 14, 94)
'                 Lcd_Chr(2, 15, 94)
'                 Keypad_Blinking( kp,3,0,while_satate_in_1)
'                 while_satate_in_1=while_satat
'              wend
            else
            kp=kp-1
              if kp =0 then

'                 while_state_blinking=1
'              while while_state_blinking
'                 txt1 = "Cal Rel Pwm <Ex>"
'                 Lcd_Out(1,1,txt1)
'                 Delay_mS(500)
'                 txt1 = "    Rel Pwm <Ex>"
'                 Lcd_Out(1,1,txt1)
'                 Lcd_Chr(2, 1, 94)
'                 Lcd_Chr(2, 2, 94)
'                 Lcd_Chr(2, 3, 94)
                  Lcd_Keypad_3(1,2,3,94)
'                 Keypad_Blinking( kp,3,0,while_satate_in_1)
'                 while_satate_in_1=while_satat
'              wend
              end if
              if kp =1 then

'                 while_state_blinking=1
'              while while_state_blinking

                 Lcd_Keypad_3(5,6,7,94)
'                 Keypad_Blinking( kp,3,0,while_satate_in_1)
'                 while_satate_in_1=while_satat
'              wend

              end if
              if kp =2 then

'                      while_state_blinking=1
'              while while_state_blinking
'                 txt1 = "Cal Rel Pwm <Ex>"
                 Lcd_Keypad_3(9,10,11,94)
'                 Keypad_Blinking( kp,3,0,while_satate_in_1)
'                 while_satate_in_1=while_satat
'              wend
              end if

            end if


      Delay_mS(100)
    end if
    if (Button(PINA, 5, 0.1, 1)<> 0) then    ' Detect logical one setting key
      oldstate_up = 1                      ' Update flag
      end if
      if ((oldstate_up) and (Button(PINA, 5, 0.1, 0))) then    ' Detect one-to-zero transition
            oldstate_up=0 while_state_blinking=1
           Lcd_0()
           if (kp=3) then
              kp=0
'               while_state_blinking=1
'              while while_state_blinking
'                 txt1 = "Cal Rel Pwm <Ex>"
'                 Lcd_Out(1,1,txt1)
'                 Delay_mS(500)
'                 txt1 = "    Rel Pwm <Ex>"
'                 Lcd_Out(1,1,txt1)
'                 Lcd_Chr(2, 1, 94)
'                 Lcd_Chr(2, 2, 94)
'                 Lcd_Chr(2, 3, 94)
                  Lcd_Keypad_3(1,2,3,94)
'                 Keypad_Blinking( kp,3,0,while_satate_in_1)
'                 while_satate_in_1=while_satat
'              wend
            else
            kp=kp+1
              if kp =3 then
'               while_state_blinking=1
'              while while_state_blinking
'                 txt1 = "Cal Rel Pwm <Ex>"
'                 Lcd_Out(1,1,txt1)
'                 Delay_mS(500)
'                 txt1 = "cal Rel Pwm     "
'                 Lcd_Out(1,1,txt1)
'                 Lcd_Chr(2, 13, 94)
'                 Lcd_Chr(2, 14, 94)
'                 Lcd_Chr(2, 15, 94)
                  Lcd_Keypad_3(13,14,15,94)
'                 Keypad_Blinking( kp,3,0,while_satate_in_1)
'                 while_satate_in_1=while_satat
'              wend


              end if
              if kp =1 then

'                  while_state_blinking=1
'              while while_state_blinking
                 Lcd_Keypad_3(5,6,7,94)
'                 Keypad_Blinking( kp,3,0,while_satate_in_1)
'                 while_satate_in_1=while_satat
'              wend

              end if
              if kp =2 then

'                   while_state_blinking=1
'              while while_state_blinking
                 Lcd_Keypad_3(9,10,11,94)
'                 Keypad_Blinking( kp,3,0,while_satate_in_1)
'                 while_satate_in_1=while_satat
'              wend

              end if

            end if

      Delay_mS(500)
    end if

    if (Button(PINA, 6, 0.1, 1)<> 0) then    ' Detect logical one setting key
      oldstate_ok =1
    end if
      if ((oldstate_ok) and (while_satate_in_1) and (Button(PINA, 6, 0.1, 0))) then    ' Detect one-to-zero transition
      while_state=0
      while_satate_in_1=0
      Lcd_0()
      oldstate_ok = 1                      ' Update flag
      if (kp=3) then

        LCD_Out(1,1, "Exit is aitctived")  ''Show on LCD
      else

         LCD_Out(1,1, "Setting is actived")  ''Show on LCD
      end if
'      inttostr(kp,txt)
'      LCD_Out(2,8, txt)  ''Show on LCD
      Delay_mS(500)
      end if


   wend
        inttostr(kp,txt)
        LCD_Out(1,2, txt)  ''Show on LCD
        Delay_mS(2500)
          select case kp
           'case 10: kp = 42   ' "*"        ' Uncomment this block for keypad4x3
           'case 11: kp = 48   ' "0"
           'case 12: kp = 35   ' "#"
           'default: kp += 48
            case 0
              kp = 0  ' 1
'               Shamsi_call()             ' ????? ???? ? ????? ???
                LCD_Out(2,1, "Case Cal is selected ")  ''Show on LCD
                Keypad_set__date_time()
'                Shamsi_call()
                inttostr(kp,txt)
                LCD_Out(1,1, txt)  ''Show on LCD
                inttostr(kp,txt)
                LCD_Out(2,9, txt)  ''Show on LCD
                LCD_Out(2,1, "Case Cal is selected ")  ''Show on LCD
                Delay_mS(1500)

            case 1                             ' ????? ???? ???? ? ????? ??? ??? ??
               LCD_Out(2,1, "Case Relay is is selected ")  ''Show on LCD
'                Keypad_Relay_set__date_time()
                 Keypad_Relay_set__date_time_1()
'                Shamsi_call()
                inttostr(kp,txt)
                LCD_Out(1,1, txt)  ''Show on LCD
                inttostr(kp,txt)
                LCD_Out(2,9, txt)  ''Show on LCD
                LCD_Out(2,1, "Case Relay is is selected ")  ''Show on LCD
                Delay_mS(1500)
'              kp = 1  ' 1
            case 2
'              Keypad_set__relay_time()
               LCD_Out(2,1, "Case PWM is selected ")  ''Show on LCD
                Keypad_set__date_time()
'                Shamsi_call()
                inttostr(kp,txt)
                LCD_Out(1,1, txt)  ''Show on LCD
                inttostr(kp,txt)
                LCD_Out(2,9, txt)  ''Show on LCD
                LCD_Out(2,1, "Case PWM  is selected ")  ''Show on LCD
                Delay_mS(1500)
'              kp = 2  ' 2
            case 3
              inttostr(kp,txt)                     ' ??? ????? ???? ? ?????? ????? ? ????
                LCD_Out(1,1, txt)  ''Show on LCD
                inttostr(kp,txt)
                LCD_Out(2,9, txt)  ''Show on LCD
                LCD_Out(2,1, "Case  Exit is selected ")  ''Show on LCD
                Delay_mS(500)
            case 4
              kp = 4  ' A
          end select


     'LCD_Out(1,1, "end of loop")  ''Show on LCD
end sub

' ######################################################################################################################################
sub procedure Initialize ()
dim j as integer
J=0
    txt1 = "PROGRAM1"
    txt2 = "PROGRAM2"
    txt3 = "PROGRAM3"
    txt4 = "PROGRAM4"
'    txt5 = "PROGRAM5"
'    txt6 = "WWW.ELASA.IR"
    DDD2_bit = 1
    DDd6_bit = 1                    ' set portd pin0 as output pin for ufa fountain
    DDB3_bit = 1                    ' Set PORTB pin 3 as output pin for the PWM (according to datasheet)
    DDD7_bit = 1                    ' Set PORTD pin 7 as output pin for the PWM1 (according to datasheet)
    DDD4_bit = 1                      'Set PORTD pin 4 as output pin for the PWM1 (according to datasheet oc1a)
    DDD5_bit = 1                      'Set PORTD pin 5 as output pin for the PWM1 (according to datasheet oc1b)
    PWM1_Init(_PWM1_FAST_MODE, _PWM1_PRESCALER_8, _PWM1_NON_INVERTED,J)
    PWM2_Init(_PWM2_FAST_MODE, _PWM2_PRESCALER_8, _PWM2_NON_INVERTED, J)
    PWM16bit_Init(_PWM16_PHASE_CORRECT_MODE_8BIT, _PWM16_PRESCALER_16bit_8, _PWM16_NON_INVERTED, j , _TIMER1)
end sub
 sub procedure PWM_MAKE(dim jj as byte,dim max_duty,Pwm_chanel as integer)
     jj=floor((jj*255)/100)
     select case Pwm_chanel
     case 1
          PWM16bit_Change_Duty(jj, _TIMER1_CH_A )
     case 2
          PWM16bit_Change_Duty( jj, _TIMER1_CH_B )
     case 3
          PWM1_Set_Duty(jj)
     case 4
          PWM2_Set_Duty(jj)
     end select
 end sub
 
sub procedure interrupt_ISR () org IVT_ADDR_INT0            ''// Interrupt rutine
'dim while_satate_in_1 as bit

  SREG_I_bit = 0                                   '' // Disable Interrupts


  INTF0_bit=0                                                  '  // Clear interrupt flag
  Keypad_3()
  SREG_I_bit = 1                                  ''  // Enable Interrupts
   Lcd_0()
        inttostr(on_a_0 [chanel-1][pwm_chanel-1][0],txt)                     ' ??? ????? ???? ? ?????? ????? ? ????
           LCD_Out(1,11, txt)
            inttostr(week,txt)
            LCD_Out(2,11, txt)
            Delay_mS(1000)
end sub
main:
  DDB0_bit = 0                                        ' set Button pin as input
  DDA2_bit = 0                                        ' set Button pin as input


  DDA5_bit = 0                                        ' set Button pin as input
  DDA4_bit = 0                                        ' set Button pin as input
  DDA3_bit = 0                                        ' set Button pin as input
  DDC2_bit =1  DDC3_bit =1   DDC4_bit =1   DDC5_bit =1  ' configure PORTD as output
  DDC6_bit =1 DDC7_bit =1
  DDD0_bit =1  DDD1_bit =1   DDD3_bit =1   DDD4_bit =1  ' configure PORTD as output
  DDD5_bit =1 DDD6_bit =1      DDD7_bit =1
  DDB1_bit =1      DDB3_bit =1
  DDA0_bit =1 DDA1_bit =1      DDA2_bit =1  DDA3_bit =1
'  PORTC = 0xAA                                        ' initial PORTC value

'  oldstate = 0                                        ' oldstate initial value
  txt1 = "www.elasa.ir"
  txt2 = "RTC2 click"
  txt3 = "DATE:"
  txt4 = "TIME:"

'  Soft_I2C_Init()                   ' Initialize I2C bus for communication with RTC
  Lcd_0()
  Lcd_Out(1,1,txt1)                 ' Write text in first row
  Lcd_Out(2,4,txt2)                 ' Write text in second row



  Lcd_Cmd(_LCD_CLEAR)               ' Prepare and output static text on LCD
  LCD_Chr(1,8,".")
  LCD_Chr(1,11,".")
  LCD_Out(2,1,"Time:")
  LCD_Chr(2,8,":")
  LCD_Chr(2,11,":")
  LCD_Out(1,12,"")






     hours=0x0  minutes=0x0   seconds=0x0 day= 0x2 week=0x3   month=0x11  year=0x15
'   a = 17
'   year = Dec2Bcd(a) ' b equals 34
  Write_Time(hours, minutes, seconds, 0x2, 0x02,   0x11,year)'
  Read_Time(@hours, @minutes, @seconds, @day, @week, @month, @year)
  Shamsi_call()
  Shamsi_show_lcd( jmonth,jday,jyear,week,hours ,minutes,seconds )

  Delay_mS(1000)
  miladi_call(jmonth,jday,jyear,week,hours ,minutes,seconds )
   Delay_ms(500)
  ' ##########   Interupt enalbleing   ##########
   ISC00_bit = 1                                    '' // Set interrupts to be detected on rising edge
'   ISC00_bit = 1
   SREG_I_bit = 0
    Delay_ms(500)                                  ''  // Enable Interrupts
   SREG_I_bit = 1

   INT2_bit = 1
   for chanel =1 to 1
'     for week =1to 7
     for Pwm_chanel=1 to 1
     on_a_0 [chanel-1][pwm_chanel-1][0] =0   'on and off
     on_a_0 [chanel-1][pwm_chanel-1][1]=0    '   hour for on and off
     on_a_0 [chanel-1][pwm_chanel-1][2] =0    '   minuts for on and off
     on_a_0 [chanel-1][pwm_chanel-1][3]=0      '  PWM duty sycle
      Delay_mS(1000)
      next pwm_chanel
'      next week
      next chanel

'      PWM_Init(_PWM_FAST_MODE, _PWM_PRESCALER_8, _PWM_NON_INVERTED, 16)
'      PWM1_Init(_PWM_FAST_MODE, _PWM1_PRESCALER_8, _PWM1_NON_INVERTED, 16)

'#########################################

  while TRUE

     Read_Time(@hours, @minutes, @seconds, @day, @week, @month, @year)
     Shamsi_call()
     Shamsi_show_lcd( jmonth,jday,jyear,week,hours ,minutes,seconds )
     for chanel =1 to 2
'     for week =1to 7
     for Pwm_chanel=1 to 2
     if  (on_a_0 [chanel-1][pwm_chanel-1][1]>= hours ) and (on_a_0 [chanel-1][pwm_chanel-1][0]=1) then
         if    (on_a_0 [chanel-1][pwm_chanel-1][2]>= minutes)  and (on_a_0[chanel-1][pwm_chanel-1][0]=1)then
           Lcd_0()
           PWM_MAKE (on_a_0[chanel-1][pwm_chanel-1][3],255,pwm_chanel)''(dim jj as byte,dim max_duty,Pwm_chanel as integer)
           Lcd_Out(1,1,"on pwm mode")
           inttostr(chanel,txt)                     ' ??? ????? ???? ? ?????? ????? ? ????
           LCD_Out(1,13, txt)
           inttostr(on_off,txt)                     ' ??? ????? ???? ? ?????? ????? ? ????
           LCD_Out(2,1, txt)
           inttostr(pwm_chanel,txt)                     ' ??? ????? ???? ? ?????? ????? ? ????
           LCD_Out(2,4, txt)
         end if
      else
        Lcd_0()
        inttostr(on_a_0 [chanel-1][pwm_chanel-1][0],txt)                     ' ??? ????? ???? ? ?????? ????? ? ????
           LCD_Out(1,11, txt)
            inttostr(week,txt)
            LCD_Out(2,11, txt)
           Lcd_Out(1,1,"offfff")
            Delay_mS(100)
      end if
'      Delay_mS(1000)
      next pwm_chanel
'      next week
      next chanel

    miladi_call(jmonth,jday,jyear,week,hours ,minutes,seconds )


  wend                                                ' endless loop
end.